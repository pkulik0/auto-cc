// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: pb/credentials.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pb";

export interface AddCredentialsGoogleRequest {
  clientId: string;
  clientSecret: string;
}

export interface CredentialsGoogle {
  id: number;
  clientId: string;
  clientSecret: string;
  usage: number;
}

export interface AddCredentialsGoogleResponse {
  credentials: CredentialsGoogle | undefined;
}

export interface AddCredentialsDeepLRequest {
  key: string;
}

export interface CredentialsDeepL {
  id: number;
  key: string;
  usage: number;
}

export interface AddCredentialsDeepLResponse {
  credentials: CredentialsDeepL | undefined;
}

export interface GetCredentialsResponse {
  google: CredentialsGoogle[];
  deepl: CredentialsDeepL[];
}

export interface GetSessionGoogleURLResponse {
  url: string;
}

export interface GetUserSessionsGoogleResponse {
  credentialIds: number[];
}

function createBaseAddCredentialsGoogleRequest(): AddCredentialsGoogleRequest {
  return { clientId: "", clientSecret: "" };
}

export const AddCredentialsGoogleRequest: MessageFns<AddCredentialsGoogleRequest> = {
  encode(message: AddCredentialsGoogleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(18).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCredentialsGoogleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCredentialsGoogleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCredentialsGoogleRequest {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
    };
  },

  toJSON(message: AddCredentialsGoogleRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCredentialsGoogleRequest>, I>>(base?: I): AddCredentialsGoogleRequest {
    return AddCredentialsGoogleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCredentialsGoogleRequest>, I>>(object: I): AddCredentialsGoogleRequest {
    const message = createBaseAddCredentialsGoogleRequest();
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseCredentialsGoogle(): CredentialsGoogle {
  return { id: 0, clientId: "", clientSecret: "", usage: 0 };
}

export const CredentialsGoogle: MessageFns<CredentialsGoogle> = {
  encode(message: CredentialsGoogle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.usage !== 0) {
      writer.uint32(32).uint64(message.usage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CredentialsGoogle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentialsGoogle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.usage = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CredentialsGoogle {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      usage: isSet(object.usage) ? globalThis.Number(object.usage) : 0,
    };
  },

  toJSON(message: CredentialsGoogle): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.usage !== 0) {
      obj.usage = Math.round(message.usage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CredentialsGoogle>, I>>(base?: I): CredentialsGoogle {
    return CredentialsGoogle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CredentialsGoogle>, I>>(object: I): CredentialsGoogle {
    const message = createBaseCredentialsGoogle();
    message.id = object.id ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.usage = object.usage ?? 0;
    return message;
  },
};

function createBaseAddCredentialsGoogleResponse(): AddCredentialsGoogleResponse {
  return { credentials: undefined };
}

export const AddCredentialsGoogleResponse: MessageFns<AddCredentialsGoogleResponse> = {
  encode(message: AddCredentialsGoogleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentials !== undefined) {
      CredentialsGoogle.encode(message.credentials, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCredentialsGoogleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCredentialsGoogleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.credentials = CredentialsGoogle.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCredentialsGoogleResponse {
    return { credentials: isSet(object.credentials) ? CredentialsGoogle.fromJSON(object.credentials) : undefined };
  },

  toJSON(message: AddCredentialsGoogleResponse): unknown {
    const obj: any = {};
    if (message.credentials !== undefined) {
      obj.credentials = CredentialsGoogle.toJSON(message.credentials);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCredentialsGoogleResponse>, I>>(base?: I): AddCredentialsGoogleResponse {
    return AddCredentialsGoogleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCredentialsGoogleResponse>, I>>(object: I): AddCredentialsGoogleResponse {
    const message = createBaseAddCredentialsGoogleResponse();
    message.credentials = (object.credentials !== undefined && object.credentials !== null)
      ? CredentialsGoogle.fromPartial(object.credentials)
      : undefined;
    return message;
  },
};

function createBaseAddCredentialsDeepLRequest(): AddCredentialsDeepLRequest {
  return { key: "" };
}

export const AddCredentialsDeepLRequest: MessageFns<AddCredentialsDeepLRequest> = {
  encode(message: AddCredentialsDeepLRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCredentialsDeepLRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCredentialsDeepLRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCredentialsDeepLRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: AddCredentialsDeepLRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCredentialsDeepLRequest>, I>>(base?: I): AddCredentialsDeepLRequest {
    return AddCredentialsDeepLRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCredentialsDeepLRequest>, I>>(object: I): AddCredentialsDeepLRequest {
    const message = createBaseAddCredentialsDeepLRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseCredentialsDeepL(): CredentialsDeepL {
  return { id: 0, key: "", usage: 0 };
}

export const CredentialsDeepL: MessageFns<CredentialsDeepL> = {
  encode(message: CredentialsDeepL, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.usage !== 0) {
      writer.uint32(24).uint64(message.usage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CredentialsDeepL {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentialsDeepL();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.usage = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CredentialsDeepL {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      usage: isSet(object.usage) ? globalThis.Number(object.usage) : 0,
    };
  },

  toJSON(message: CredentialsDeepL): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.usage !== 0) {
      obj.usage = Math.round(message.usage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CredentialsDeepL>, I>>(base?: I): CredentialsDeepL {
    return CredentialsDeepL.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CredentialsDeepL>, I>>(object: I): CredentialsDeepL {
    const message = createBaseCredentialsDeepL();
    message.id = object.id ?? 0;
    message.key = object.key ?? "";
    message.usage = object.usage ?? 0;
    return message;
  },
};

function createBaseAddCredentialsDeepLResponse(): AddCredentialsDeepLResponse {
  return { credentials: undefined };
}

export const AddCredentialsDeepLResponse: MessageFns<AddCredentialsDeepLResponse> = {
  encode(message: AddCredentialsDeepLResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentials !== undefined) {
      CredentialsDeepL.encode(message.credentials, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCredentialsDeepLResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCredentialsDeepLResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.credentials = CredentialsDeepL.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCredentialsDeepLResponse {
    return { credentials: isSet(object.credentials) ? CredentialsDeepL.fromJSON(object.credentials) : undefined };
  },

  toJSON(message: AddCredentialsDeepLResponse): unknown {
    const obj: any = {};
    if (message.credentials !== undefined) {
      obj.credentials = CredentialsDeepL.toJSON(message.credentials);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCredentialsDeepLResponse>, I>>(base?: I): AddCredentialsDeepLResponse {
    return AddCredentialsDeepLResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCredentialsDeepLResponse>, I>>(object: I): AddCredentialsDeepLResponse {
    const message = createBaseAddCredentialsDeepLResponse();
    message.credentials = (object.credentials !== undefined && object.credentials !== null)
      ? CredentialsDeepL.fromPartial(object.credentials)
      : undefined;
    return message;
  },
};

function createBaseGetCredentialsResponse(): GetCredentialsResponse {
  return { google: [], deepl: [] };
}

export const GetCredentialsResponse: MessageFns<GetCredentialsResponse> = {
  encode(message: GetCredentialsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.google) {
      CredentialsGoogle.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.deepl) {
      CredentialsDeepL.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCredentialsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCredentialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.google.push(CredentialsGoogle.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deepl.push(CredentialsDeepL.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCredentialsResponse {
    return {
      google: globalThis.Array.isArray(object?.google)
        ? object.google.map((e: any) => CredentialsGoogle.fromJSON(e))
        : [],
      deepl: globalThis.Array.isArray(object?.deepl) ? object.deepl.map((e: any) => CredentialsDeepL.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetCredentialsResponse): unknown {
    const obj: any = {};
    if (message.google?.length) {
      obj.google = message.google.map((e) => CredentialsGoogle.toJSON(e));
    }
    if (message.deepl?.length) {
      obj.deepl = message.deepl.map((e) => CredentialsDeepL.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCredentialsResponse>, I>>(base?: I): GetCredentialsResponse {
    return GetCredentialsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCredentialsResponse>, I>>(object: I): GetCredentialsResponse {
    const message = createBaseGetCredentialsResponse();
    message.google = object.google?.map((e) => CredentialsGoogle.fromPartial(e)) || [];
    message.deepl = object.deepl?.map((e) => CredentialsDeepL.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetSessionGoogleURLResponse(): GetSessionGoogleURLResponse {
  return { url: "" };
}

export const GetSessionGoogleURLResponse: MessageFns<GetSessionGoogleURLResponse> = {
  encode(message: GetSessionGoogleURLResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionGoogleURLResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionGoogleURLResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionGoogleURLResponse {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: GetSessionGoogleURLResponse): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSessionGoogleURLResponse>, I>>(base?: I): GetSessionGoogleURLResponse {
    return GetSessionGoogleURLResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSessionGoogleURLResponse>, I>>(object: I): GetSessionGoogleURLResponse {
    const message = createBaseGetSessionGoogleURLResponse();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseGetUserSessionsGoogleResponse(): GetUserSessionsGoogleResponse {
  return { credentialIds: [] };
}

export const GetUserSessionsGoogleResponse: MessageFns<GetUserSessionsGoogleResponse> = {
  encode(message: GetUserSessionsGoogleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.credentialIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserSessionsGoogleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSessionsGoogleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.credentialIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.credentialIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserSessionsGoogleResponse {
    return {
      credentialIds: globalThis.Array.isArray(object?.credentialIds)
        ? object.credentialIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: GetUserSessionsGoogleResponse): unknown {
    const obj: any = {};
    if (message.credentialIds?.length) {
      obj.credentialIds = message.credentialIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSessionsGoogleResponse>, I>>(base?: I): GetUserSessionsGoogleResponse {
    return GetUserSessionsGoogleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserSessionsGoogleResponse>, I>>(
    object: I,
  ): GetUserSessionsGoogleResponse {
    const message = createBaseGetUserSessionsGoogleResponse();
    message.credentialIds = object.credentialIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
