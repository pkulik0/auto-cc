// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: pb/translation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pb";

export interface GetLanguagesResponse {
  languages: string[];
}

export interface TranslateRequest {
  text: string[];
  sourceLanguage: string;
  targetLanguage: string;
}

export interface TranslateResponse {
  text: string[];
}

function createBaseGetLanguagesResponse(): GetLanguagesResponse {
  return { languages: [] };
}

export const GetLanguagesResponse: MessageFns<GetLanguagesResponse> = {
  encode(message: GetLanguagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLanguagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLanguagesResponse {
    return {
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetLanguagesResponse): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLanguagesResponse>, I>>(base?: I): GetLanguagesResponse {
    return GetLanguagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLanguagesResponse>, I>>(object: I): GetLanguagesResponse {
    const message = createBaseGetLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseTranslateRequest(): TranslateRequest {
  return { text: [], sourceLanguage: "", targetLanguage: "" };
}

export const TranslateRequest: MessageFns<TranslateRequest> = {
  encode(message: TranslateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.text) {
      writer.uint32(10).string(v!);
    }
    if (message.sourceLanguage !== "") {
      writer.uint32(18).string(message.sourceLanguage);
    }
    if (message.targetLanguage !== "") {
      writer.uint32(26).string(message.targetLanguage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceLanguage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetLanguage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateRequest {
    return {
      text: globalThis.Array.isArray(object?.text) ? object.text.map((e: any) => globalThis.String(e)) : [],
      sourceLanguage: isSet(object.sourceLanguage) ? globalThis.String(object.sourceLanguage) : "",
      targetLanguage: isSet(object.targetLanguage) ? globalThis.String(object.targetLanguage) : "",
    };
  },

  toJSON(message: TranslateRequest): unknown {
    const obj: any = {};
    if (message.text?.length) {
      obj.text = message.text;
    }
    if (message.sourceLanguage !== "") {
      obj.sourceLanguage = message.sourceLanguage;
    }
    if (message.targetLanguage !== "") {
      obj.targetLanguage = message.targetLanguage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateRequest>, I>>(base?: I): TranslateRequest {
    return TranslateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateRequest>, I>>(object: I): TranslateRequest {
    const message = createBaseTranslateRequest();
    message.text = object.text?.map((e) => e) || [];
    message.sourceLanguage = object.sourceLanguage ?? "";
    message.targetLanguage = object.targetLanguage ?? "";
    return message;
  },
};

function createBaseTranslateResponse(): TranslateResponse {
  return { text: [] };
}

export const TranslateResponse: MessageFns<TranslateResponse> = {
  encode(message: TranslateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.text) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateResponse {
    return { text: globalThis.Array.isArray(object?.text) ? object.text.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: TranslateResponse): unknown {
    const obj: any = {};
    if (message.text?.length) {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateResponse>, I>>(base?: I): TranslateResponse {
    return TranslateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateResponse>, I>>(object: I): TranslateResponse {
    const message = createBaseTranslateResponse();
    message.text = object.text?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
