// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/credentials (interfaces: Credentials)
//
// Generated by this command:
//
//	mockgen -destination=../mock/credentials.go -package=mock . Credentials
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/pkulik0/autocc/api/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentials is a mock of Credentials interface.
type MockCredentials struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsMockRecorder
	isgomock struct{}
}

// MockCredentialsMockRecorder is the mock recorder for MockCredentials.
type MockCredentialsMockRecorder struct {
	mock *MockCredentials
}

// NewMockCredentials creates a new mock instance.
func NewMockCredentials(ctrl *gomock.Controller) *MockCredentials {
	mock := &MockCredentials{ctrl: ctrl}
	mock.recorder = &MockCredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentials) EXPECT() *MockCredentialsMockRecorder {
	return m.recorder
}

// AddCredentialsDeepL mocks base method.
func (m *MockCredentials) AddCredentialsDeepL(ctx context.Context, key string) (*model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsDeepL", ctx, key)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsDeepL indicates an expected call of AddCredentialsDeepL.
func (mr *MockCredentialsMockRecorder) AddCredentialsDeepL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsDeepL", reflect.TypeOf((*MockCredentials)(nil).AddCredentialsDeepL), ctx, key)
}

// AddCredentialsGoogle mocks base method.
func (m *MockCredentials) AddCredentialsGoogle(ctx context.Context, clientID, clientSecret string) (*model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsGoogle", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsGoogle indicates an expected call of AddCredentialsGoogle.
func (mr *MockCredentialsMockRecorder) AddCredentialsGoogle(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsGoogle", reflect.TypeOf((*MockCredentials)(nil).AddCredentialsGoogle), ctx, clientID, clientSecret)
}

// CreateSessionGoogle mocks base method.
func (m *MockCredentials) CreateSessionGoogle(ctx context.Context, state, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionGoogle", ctx, state, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionGoogle indicates an expected call of CreateSessionGoogle.
func (mr *MockCredentialsMockRecorder) CreateSessionGoogle(ctx, state, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionGoogle", reflect.TypeOf((*MockCredentials)(nil).CreateSessionGoogle), ctx, state, code)
}

// GetCredentials mocks base method.
func (m *MockCredentials) GetCredentials(ctx context.Context) ([]model.CredentialsGoogle, []model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx)
	ret0, _ := ret[0].([]model.CredentialsGoogle)
	ret1, _ := ret[1].([]model.CredentialsDeepL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsMockRecorder) GetCredentials(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentials)(nil).GetCredentials), ctx)
}

// GetSessionGoogleURL mocks base method.
func (m *MockCredentials) GetSessionGoogleURL(ctx context.Context, credentialsID uint, userID, redirectURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionGoogleURL", ctx, credentialsID, userID, redirectURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionGoogleURL indicates an expected call of GetSessionGoogleURL.
func (mr *MockCredentialsMockRecorder) GetSessionGoogleURL(ctx, credentialsID, userID, redirectURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionGoogleURL", reflect.TypeOf((*MockCredentials)(nil).GetSessionGoogleURL), ctx, credentialsID, userID, redirectURL)
}

// GetSessionsGoogleByUser mocks base method.
func (m *MockCredentials) GetSessionsGoogleByUser(ctx context.Context, userID string) ([]model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsGoogleByUser", ctx, userID)
	ret0, _ := ret[0].([]model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsGoogleByUser indicates an expected call of GetSessionsGoogleByUser.
func (mr *MockCredentialsMockRecorder) GetSessionsGoogleByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsGoogleByUser", reflect.TypeOf((*MockCredentials)(nil).GetSessionsGoogleByUser), ctx, userID)
}

// RemoveCredentialsDeepL mocks base method.
func (m *MockCredentials) RemoveCredentialsDeepL(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsDeepL", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsDeepL indicates an expected call of RemoveCredentialsDeepL.
func (mr *MockCredentialsMockRecorder) RemoveCredentialsDeepL(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsDeepL", reflect.TypeOf((*MockCredentials)(nil).RemoveCredentialsDeepL), ctx, id)
}

// RemoveCredentialsGoogle mocks base method.
func (m *MockCredentials) RemoveCredentialsGoogle(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsGoogle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsGoogle indicates an expected call of RemoveCredentialsGoogle.
func (mr *MockCredentialsMockRecorder) RemoveCredentialsGoogle(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsGoogle", reflect.TypeOf((*MockCredentials)(nil).RemoveCredentialsGoogle), ctx, id)
}

// RemoveSessionGoogle mocks base method.
func (m *MockCredentials) RemoveSessionGoogle(ctx context.Context, userID string, credentialsID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSessionGoogle", ctx, userID, credentialsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSessionGoogle indicates an expected call of RemoveSessionGoogle.
func (mr *MockCredentialsMockRecorder) RemoveSessionGoogle(ctx, userID, credentialsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSessionGoogle", reflect.TypeOf((*MockCredentials)(nil).RemoveSessionGoogle), ctx, userID, credentialsID)
}
