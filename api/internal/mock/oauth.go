// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/oauth (interfaces: Configs,OAuth2Config)
//
// Generated by this command:
//
//	mockgen -destination=../mock/oauth.go -package=mock . Configs,OAuth2Config
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	oauth "github.com/pkulik0/autocc/api/internal/oauth"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockConfigs is a mock of Configs interface.
type MockConfigs struct {
	ctrl     *gomock.Controller
	recorder *MockConfigsMockRecorder
	isgomock struct{}
}

// MockConfigsMockRecorder is the mock recorder for MockConfigs.
type MockConfigsMockRecorder struct {
	mock *MockConfigs
}

// NewMockConfigs creates a new mock instance.
func NewMockConfigs(ctrl *gomock.Controller) *MockConfigs {
	mock := &MockConfigs{ctrl: ctrl}
	mock.recorder = &MockConfigsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigs) EXPECT() *MockConfigsMockRecorder {
	return m.recorder
}

// GetGoogle mocks base method.
func (m *MockConfigs) GetGoogle(clientID, clientSecret string) (oauth.OAuth2Config, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogle", clientID, clientSecret)
	ret0, _ := ret[0].(oauth.OAuth2Config)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetGoogle indicates an expected call of GetGoogle.
func (mr *MockConfigsMockRecorder) GetGoogle(clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogle", reflect.TypeOf((*MockConfigs)(nil).GetGoogle), clientID, clientSecret)
}

// MockOAuth2Config is a mock of OAuth2Config interface.
type MockOAuth2Config struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ConfigMockRecorder
	isgomock struct{}
}

// MockOAuth2ConfigMockRecorder is the mock recorder for MockOAuth2Config.
type MockOAuth2ConfigMockRecorder struct {
	mock *MockOAuth2Config
}

// NewMockOAuth2Config creates a new mock instance.
func NewMockOAuth2Config(ctrl *gomock.Controller) *MockOAuth2Config {
	mock := &MockOAuth2Config{ctrl: ctrl}
	mock.recorder = &MockOAuth2ConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Config) EXPECT() *MockOAuth2ConfigMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockOAuth2Config) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockOAuth2ConfigMockRecorder) AuthCodeURL(state any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockOAuth2Config)(nil).AuthCodeURL), varargs...)
}

// Client mocks base method.
func (m *MockOAuth2Config) Client(ctx context.Context, t *oauth2.Token) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", ctx, t)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockOAuth2ConfigMockRecorder) Client(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockOAuth2Config)(nil).Client), ctx, t)
}

// Exchange mocks base method.
func (m *MockOAuth2Config) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockOAuth2ConfigMockRecorder) Exchange(ctx, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockOAuth2Config)(nil).Exchange), varargs...)
}

// TokenSource mocks base method.
func (m *MockOAuth2Config) TokenSource(ctx context.Context, t *oauth2.Token) oauth2.TokenSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenSource", ctx, t)
	ret0, _ := ret[0].(oauth2.TokenSource)
	return ret0
}

// TokenSource indicates an expected call of TokenSource.
func (mr *MockOAuth2ConfigMockRecorder) TokenSource(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenSource", reflect.TypeOf((*MockOAuth2Config)(nil).TokenSource), ctx, t)
}
