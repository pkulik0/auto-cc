// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/oauth (interfaces: OAuth2,OAuth2Client)
//
// Generated by this command:
//
//	mockgen -destination=../mock/oauth.go -package=mock . OAuth2,OAuth2Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauth "github.com/pkulik0/autocc/api/internal/oauth"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockOAuth2 is a mock of OAuth2 interface.
type MockOAuth2 struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2MockRecorder
}

// MockOAuth2MockRecorder is the mock recorder for MockOAuth2.
type MockOAuth2MockRecorder struct {
	mock *MockOAuth2
}

// NewMockOAuth2 creates a new mock instance.
func NewMockOAuth2(ctrl *gomock.Controller) *MockOAuth2 {
	mock := &MockOAuth2{ctrl: ctrl}
	mock.recorder = &MockOAuth2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2) EXPECT() *MockOAuth2MockRecorder {
	return m.recorder
}

// GetGoogle mocks base method.
func (m *MockOAuth2) GetGoogle(arg0, arg1 string) (oauth.OAuth2Client, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogle", arg0, arg1)
	ret0, _ := ret[0].(oauth.OAuth2Client)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetGoogle indicates an expected call of GetGoogle.
func (mr *MockOAuth2MockRecorder) GetGoogle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogle", reflect.TypeOf((*MockOAuth2)(nil).GetGoogle), arg0, arg1)
}

// MockOAuth2Client is a mock of OAuth2Client interface.
type MockOAuth2Client struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ClientMockRecorder
}

// MockOAuth2ClientMockRecorder is the mock recorder for MockOAuth2Client.
type MockOAuth2ClientMockRecorder struct {
	mock *MockOAuth2Client
}

// NewMockOAuth2Client creates a new mock instance.
func NewMockOAuth2Client(ctrl *gomock.Controller) *MockOAuth2Client {
	mock := &MockOAuth2Client{ctrl: ctrl}
	mock.recorder = &MockOAuth2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Client) EXPECT() *MockOAuth2ClientMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockOAuth2Client) AuthCodeURL(arg0 string, arg1 ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockOAuth2ClientMockRecorder) AuthCodeURL(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockOAuth2Client)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockOAuth2Client) Exchange(arg0 context.Context, arg1 string, arg2 ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockOAuth2ClientMockRecorder) Exchange(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockOAuth2Client)(nil).Exchange), varargs...)
}
