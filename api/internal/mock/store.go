// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=../mock/store.go -package=mock . Store
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/pkulik0/autocc/api/internal/model"
	store "github.com/pkulik0/autocc/api/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddCredentialsDeepL mocks base method.
func (m *MockStore) AddCredentialsDeepL(arg0 context.Context, arg1 string) (*model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsDeepL", arg0, arg1)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsDeepL indicates an expected call of AddCredentialsDeepL.
func (mr *MockStoreMockRecorder) AddCredentialsDeepL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsDeepL", reflect.TypeOf((*MockStore)(nil).AddCredentialsDeepL), arg0, arg1)
}

// AddCredentialsGoogle mocks base method.
func (m *MockStore) AddCredentialsGoogle(arg0 context.Context, arg1, arg2 string) (*model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsGoogle", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsGoogle indicates an expected call of AddCredentialsGoogle.
func (mr *MockStoreMockRecorder) AddCredentialsGoogle(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsGoogle", reflect.TypeOf((*MockStore)(nil).AddCredentialsGoogle), arg0, arg1, arg2)
}

// CreateSessionGoogle mocks base method.
func (m *MockStore) CreateSessionGoogle(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64, arg5 uint, arg6 string) (*model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionGoogle", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionGoogle indicates an expected call of CreateSessionGoogle.
func (mr *MockStoreMockRecorder) CreateSessionGoogle(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionGoogle", reflect.TypeOf((*MockStore)(nil).CreateSessionGoogle), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetCredentialsDeepLAll mocks base method.
func (m *MockStore) GetCredentialsDeepLAll(arg0 context.Context) ([]model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsDeepLAll", arg0)
	ret0, _ := ret[0].([]model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsDeepLAll indicates an expected call of GetCredentialsDeepLAll.
func (mr *MockStoreMockRecorder) GetCredentialsDeepLAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsDeepLAll", reflect.TypeOf((*MockStore)(nil).GetCredentialsDeepLAll), arg0)
}

// GetCredentialsDeepLByID mocks base method.
func (m *MockStore) GetCredentialsDeepLByID(arg0 context.Context, arg1 uint) (*model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsDeepLByID", arg0, arg1)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsDeepLByID indicates an expected call of GetCredentialsDeepLByID.
func (mr *MockStoreMockRecorder) GetCredentialsDeepLByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsDeepLByID", reflect.TypeOf((*MockStore)(nil).GetCredentialsDeepLByID), arg0, arg1)
}

// GetCredentialsGoogleAll mocks base method.
func (m *MockStore) GetCredentialsGoogleAll(arg0 context.Context) ([]model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsGoogleAll", arg0)
	ret0, _ := ret[0].([]model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsGoogleAll indicates an expected call of GetCredentialsGoogleAll.
func (mr *MockStoreMockRecorder) GetCredentialsGoogleAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsGoogleAll", reflect.TypeOf((*MockStore)(nil).GetCredentialsGoogleAll), arg0)
}

// GetCredentialsGoogleByID mocks base method.
func (m *MockStore) GetCredentialsGoogleByID(arg0 context.Context, arg1 uint) (*model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsGoogleByID", arg0, arg1)
	ret0, _ := ret[0].(*model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsGoogleByID indicates an expected call of GetCredentialsGoogleByID.
func (mr *MockStoreMockRecorder) GetCredentialsGoogleByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsGoogleByID", reflect.TypeOf((*MockStore)(nil).GetCredentialsGoogleByID), arg0, arg1)
}

// GetSessionState mocks base method.
func (m *MockStore) GetSessionState(arg0 context.Context, arg1 string) (*model.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionState", arg0, arg1)
	ret0, _ := ret[0].(*model.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionState indicates an expected call of GetSessionState.
func (mr *MockStoreMockRecorder) GetSessionState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionState", reflect.TypeOf((*MockStore)(nil).GetSessionState), arg0, arg1)
}

// GetUserSessionsGoogle mocks base method.
func (m *MockStore) GetUserSessionsGoogle(arg0 context.Context, arg1 string) ([]model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionsGoogle", arg0, arg1)
	ret0, _ := ret[0].([]model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionsGoogle indicates an expected call of GetUserSessionsGoogle.
func (mr *MockStoreMockRecorder) GetUserSessionsGoogle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionsGoogle", reflect.TypeOf((*MockStore)(nil).GetUserSessionsGoogle), arg0, arg1)
}

// RemoveCredentialsDeepL mocks base method.
func (m *MockStore) RemoveCredentialsDeepL(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsDeepL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsDeepL indicates an expected call of RemoveCredentialsDeepL.
func (mr *MockStoreMockRecorder) RemoveCredentialsDeepL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsDeepL", reflect.TypeOf((*MockStore)(nil).RemoveCredentialsDeepL), arg0, arg1)
}

// RemoveCredentialsGoogle mocks base method.
func (m *MockStore) RemoveCredentialsGoogle(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsGoogle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsGoogle indicates an expected call of RemoveCredentialsGoogle.
func (mr *MockStoreMockRecorder) RemoveCredentialsGoogle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsGoogle", reflect.TypeOf((*MockStore)(nil).RemoveCredentialsGoogle), arg0, arg1)
}

// RemoveSessionGoogle mocks base method.
func (m *MockStore) RemoveSessionGoogle(arg0 context.Context, arg1 string, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSessionGoogle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSessionGoogle indicates an expected call of RemoveSessionGoogle.
func (mr *MockStoreMockRecorder) RemoveSessionGoogle(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSessionGoogle", reflect.TypeOf((*MockStore)(nil).RemoveSessionGoogle), arg0, arg1, arg2)
}

// SaveSessionState mocks base method.
func (m *MockStore) SaveSessionState(arg0 context.Context, arg1 uint, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSessionState", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSessionState indicates an expected call of SaveSessionState.
func (mr *MockStoreMockRecorder) SaveSessionState(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSessionState", reflect.TypeOf((*MockStore)(nil).SaveSessionState), arg0, arg1, arg2, arg3, arg4)
}

// Transaction mocks base method.
func (m *MockStore) Transaction(arg0 context.Context, arg1 func(context.Context, store.Store) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStoreMockRecorder) Transaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStore)(nil).Transaction), arg0, arg1)
}
