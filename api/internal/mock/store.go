// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=../mock/store.go -package=mock . Store
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/pkulik0/autocc/api/internal/model"
	store "github.com/pkulik0/autocc/api/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddCredentialsDeepL mocks base method.
func (m *MockStore) AddCredentialsDeepL(ctx context.Context, key string, usage uint) (*model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsDeepL", ctx, key, usage)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsDeepL indicates an expected call of AddCredentialsDeepL.
func (mr *MockStoreMockRecorder) AddCredentialsDeepL(ctx, key, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsDeepL", reflect.TypeOf((*MockStore)(nil).AddCredentialsDeepL), ctx, key, usage)
}

// AddCredentialsGoogle mocks base method.
func (m *MockStore) AddCredentialsGoogle(ctx context.Context, clientID, clientSecret string) (*model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredentialsGoogle", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredentialsGoogle indicates an expected call of AddCredentialsGoogle.
func (mr *MockStoreMockRecorder) AddCredentialsGoogle(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredentialsGoogle", reflect.TypeOf((*MockStore)(nil).AddCredentialsGoogle), ctx, clientID, clientSecret)
}

// CreateSessionGoogle mocks base method.
func (m *MockStore) CreateSessionGoogle(ctx context.Context, userID, accessToken, refreshToken, scopes string, expiry time.Time, credentials model.CredentialsGoogle) (*model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionGoogle", ctx, userID, accessToken, refreshToken, scopes, expiry, credentials)
	ret0, _ := ret[0].(*model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionGoogle indicates an expected call of CreateSessionGoogle.
func (mr *MockStoreMockRecorder) CreateSessionGoogle(ctx, userID, accessToken, refreshToken, scopes, expiry, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionGoogle", reflect.TypeOf((*MockStore)(nil).CreateSessionGoogle), ctx, userID, accessToken, refreshToken, scopes, expiry, credentials)
}

// GetCredentialsDeepLAll mocks base method.
func (m *MockStore) GetCredentialsDeepLAll(ctx context.Context) ([]model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsDeepLAll", ctx)
	ret0, _ := ret[0].([]model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsDeepLAll indicates an expected call of GetCredentialsDeepLAll.
func (mr *MockStoreMockRecorder) GetCredentialsDeepLAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsDeepLAll", reflect.TypeOf((*MockStore)(nil).GetCredentialsDeepLAll), ctx)
}

// GetCredentialsDeepLByAvailableCost mocks base method.
func (m *MockStore) GetCredentialsDeepLByAvailableCost(ctx context.Context, cost uint) (*model.CredentialsDeepL, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsDeepLByAvailableCost", ctx, cost)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentialsDeepLByAvailableCost indicates an expected call of GetCredentialsDeepLByAvailableCost.
func (mr *MockStoreMockRecorder) GetCredentialsDeepLByAvailableCost(ctx, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsDeepLByAvailableCost", reflect.TypeOf((*MockStore)(nil).GetCredentialsDeepLByAvailableCost), ctx, cost)
}

// GetCredentialsDeepLByID mocks base method.
func (m *MockStore) GetCredentialsDeepLByID(ctx context.Context, id uint) (*model.CredentialsDeepL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsDeepLByID", ctx, id)
	ret0, _ := ret[0].(*model.CredentialsDeepL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsDeepLByID indicates an expected call of GetCredentialsDeepLByID.
func (mr *MockStoreMockRecorder) GetCredentialsDeepLByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsDeepLByID", reflect.TypeOf((*MockStore)(nil).GetCredentialsDeepLByID), ctx, id)
}

// GetCredentialsGoogleAll mocks base method.
func (m *MockStore) GetCredentialsGoogleAll(ctx context.Context) ([]model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsGoogleAll", ctx)
	ret0, _ := ret[0].([]model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsGoogleAll indicates an expected call of GetCredentialsGoogleAll.
func (mr *MockStoreMockRecorder) GetCredentialsGoogleAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsGoogleAll", reflect.TypeOf((*MockStore)(nil).GetCredentialsGoogleAll), ctx)
}

// GetCredentialsGoogleByID mocks base method.
func (m *MockStore) GetCredentialsGoogleByID(ctx context.Context, id uint) (*model.CredentialsGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsGoogleByID", ctx, id)
	ret0, _ := ret[0].(*model.CredentialsGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsGoogleByID indicates an expected call of GetCredentialsGoogleByID.
func (mr *MockStoreMockRecorder) GetCredentialsGoogleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsGoogleByID", reflect.TypeOf((*MockStore)(nil).GetCredentialsGoogleByID), ctx, id)
}

// GetSessionGoogleAll mocks base method.
func (m *MockStore) GetSessionGoogleAll(ctx context.Context, userID string) ([]model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionGoogleAll", ctx, userID)
	ret0, _ := ret[0].([]model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionGoogleAll indicates an expected call of GetSessionGoogleAll.
func (mr *MockStoreMockRecorder) GetSessionGoogleAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionGoogleAll", reflect.TypeOf((*MockStore)(nil).GetSessionGoogleAll), ctx, userID)
}

// GetSessionGoogleByAvailableCost mocks base method.
func (m *MockStore) GetSessionGoogleByAvailableCost(ctx context.Context, userID string, cost uint) (*model.SessionGoogle, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionGoogleByAvailableCost", ctx, userID, cost)
	ret0, _ := ret[0].(*model.SessionGoogle)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSessionGoogleByAvailableCost indicates an expected call of GetSessionGoogleByAvailableCost.
func (mr *MockStoreMockRecorder) GetSessionGoogleByAvailableCost(ctx, userID, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionGoogleByAvailableCost", reflect.TypeOf((*MockStore)(nil).GetSessionGoogleByAvailableCost), ctx, userID, cost)
}

// GetSessionGoogleByCredentialsID mocks base method.
func (m *MockStore) GetSessionGoogleByCredentialsID(ctx context.Context, credentialsID uint, userID string) (*model.SessionGoogle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionGoogleByCredentialsID", ctx, credentialsID, userID)
	ret0, _ := ret[0].(*model.SessionGoogle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionGoogleByCredentialsID indicates an expected call of GetSessionGoogleByCredentialsID.
func (mr *MockStoreMockRecorder) GetSessionGoogleByCredentialsID(ctx, credentialsID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionGoogleByCredentialsID", reflect.TypeOf((*MockStore)(nil).GetSessionGoogleByCredentialsID), ctx, credentialsID, userID)
}

// GetSessionState mocks base method.
func (m *MockStore) GetSessionState(ctx context.Context, state string) (*model.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionState", ctx, state)
	ret0, _ := ret[0].(*model.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionState indicates an expected call of GetSessionState.
func (mr *MockStoreMockRecorder) GetSessionState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionState", reflect.TypeOf((*MockStore)(nil).GetSessionState), ctx, state)
}

// RemoveCredentialsDeepL mocks base method.
func (m *MockStore) RemoveCredentialsDeepL(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsDeepL", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsDeepL indicates an expected call of RemoveCredentialsDeepL.
func (mr *MockStoreMockRecorder) RemoveCredentialsDeepL(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsDeepL", reflect.TypeOf((*MockStore)(nil).RemoveCredentialsDeepL), ctx, id)
}

// RemoveCredentialsGoogle mocks base method.
func (m *MockStore) RemoveCredentialsGoogle(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentialsGoogle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentialsGoogle indicates an expected call of RemoveCredentialsGoogle.
func (mr *MockStoreMockRecorder) RemoveCredentialsGoogle(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsGoogle", reflect.TypeOf((*MockStore)(nil).RemoveCredentialsGoogle), ctx, id)
}

// RemoveSessionGoogle mocks base method.
func (m *MockStore) RemoveSessionGoogle(ctx context.Context, userID string, credentialsID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSessionGoogle", ctx, userID, credentialsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSessionGoogle indicates an expected call of RemoveSessionGoogle.
func (mr *MockStoreMockRecorder) RemoveSessionGoogle(ctx, userID, credentialsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSessionGoogle", reflect.TypeOf((*MockStore)(nil).RemoveSessionGoogle), ctx, userID, credentialsID)
}

// SaveSessionState mocks base method.
func (m *MockStore) SaveSessionState(ctx context.Context, credentialsID uint, userID, state, scopes, redirectURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSessionState", ctx, credentialsID, userID, state, scopes, redirectURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSessionState indicates an expected call of SaveSessionState.
func (mr *MockStoreMockRecorder) SaveSessionState(ctx, credentialsID, userID, state, scopes, redirectURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSessionState", reflect.TypeOf((*MockStore)(nil).SaveSessionState), ctx, credentialsID, userID, state, scopes, redirectURL)
}

// Transaction mocks base method.
func (m *MockStore) Transaction(ctx context.Context, f func(context.Context, store.Store) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStoreMockRecorder) Transaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStore)(nil).Transaction), ctx, f)
}

// UpdateSessionGoogle mocks base method.
func (m *MockStore) UpdateSessionGoogle(ctx context.Context, session *model.SessionGoogle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionGoogle", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionGoogle indicates an expected call of UpdateSessionGoogle.
func (mr *MockStoreMockRecorder) UpdateSessionGoogle(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionGoogle", reflect.TypeOf((*MockStore)(nil).UpdateSessionGoogle), ctx, session)
}
