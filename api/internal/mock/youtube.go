// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pkulik0/autocc/api/internal/youtube (interfaces: Youtube)
//
// Generated by this command:
//
//	mockgen -destination=../mock/youtube.go -package=mock . Youtube
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	pb "github.com/pkulik0/autocc/api/internal/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockYoutube is a mock of Youtube interface.
type MockYoutube struct {
	ctrl     *gomock.Controller
	recorder *MockYoutubeMockRecorder
	isgomock struct{}
}

// MockYoutubeMockRecorder is the mock recorder for MockYoutube.
type MockYoutubeMockRecorder struct {
	mock *MockYoutube
}

// NewMockYoutube creates a new mock instance.
func NewMockYoutube(ctrl *gomock.Controller) *MockYoutube {
	mock := &MockYoutube{ctrl: ctrl}
	mock.recorder = &MockYoutubeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYoutube) EXPECT() *MockYoutubeMockRecorder {
	return m.recorder
}

// DownloadClosedCaptions mocks base method.
func (m *MockYoutube) DownloadClosedCaptions(ctx context.Context, userID, ccID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadClosedCaptions", ctx, userID, ccID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadClosedCaptions indicates an expected call of DownloadClosedCaptions.
func (mr *MockYoutubeMockRecorder) DownloadClosedCaptions(ctx, userID, ccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadClosedCaptions", reflect.TypeOf((*MockYoutube)(nil).DownloadClosedCaptions), ctx, userID, ccID)
}

// GetClosedCaptions mocks base method.
func (m *MockYoutube) GetClosedCaptions(ctx context.Context, userID, videoID string) ([]*pb.ClosedCaptionsEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedCaptions", ctx, userID, videoID)
	ret0, _ := ret[0].([]*pb.ClosedCaptionsEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedCaptions indicates an expected call of GetClosedCaptions.
func (mr *MockYoutubeMockRecorder) GetClosedCaptions(ctx, userID, videoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedCaptions", reflect.TypeOf((*MockYoutube)(nil).GetClosedCaptions), ctx, userID, videoID)
}

// GetMetadata mocks base method.
func (m *MockYoutube) GetMetadata(ctx context.Context, userID, videoID string) (*pb.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, userID, videoID)
	ret0, _ := ret[0].(*pb.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockYoutubeMockRecorder) GetMetadata(ctx, userID, videoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockYoutube)(nil).GetMetadata), ctx, userID, videoID)
}

// GetVideos mocks base method.
func (m *MockYoutube) GetVideos(ctx context.Context, userID, nextPageToken string) ([]*pb.Video, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", ctx, userID, nextPageToken)
	ret0, _ := ret[0].([]*pb.Video)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVideos indicates an expected call of GetVideos.
func (mr *MockYoutubeMockRecorder) GetVideos(ctx, userID, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockYoutube)(nil).GetVideos), ctx, userID, nextPageToken)
}

// UpdateMetadata mocks base method.
func (m *MockYoutube) UpdateMetadata(ctx context.Context, userID, videoID string, metadata map[string]*pb.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata", ctx, userID, videoID, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockYoutubeMockRecorder) UpdateMetadata(ctx, userID, videoID, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockYoutube)(nil).UpdateMetadata), ctx, userID, videoID, metadata)
}

// UploadClosedCaptions mocks base method.
func (m *MockYoutube) UploadClosedCaptions(ctx context.Context, userID, videoID, language string, srt io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadClosedCaptions", ctx, userID, videoID, language, srt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadClosedCaptions indicates an expected call of UploadClosedCaptions.
func (mr *MockYoutubeMockRecorder) UploadClosedCaptions(ctx, userID, videoID, language, srt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadClosedCaptions", reflect.TypeOf((*MockYoutube)(nil).UploadClosedCaptions), ctx, userID, videoID, language, srt)
}
